import numpy as np
from dataclasses import dataclass
from enum import Enum, auto
from typing import List, Tuple, Optional, Dict
import torch
import torch.nn as nn
import torch.nn.functional as F


class CardType(Enum):
    # Number cards
    BLUE_5 = auto()
    PINK_6 = auto()
    ORANGE_7 = auto()
    YELLOW_8 = auto()

    # Modifier cards
    MOD_NEG_1 = auto()
    MOD_NEG_2 = auto()
    MOD_NEG_3 = auto()
    MOD_POS_2 = auto()
    MOD_POS_3 = auto()
    MOD_POS_4 = auto()

    # Special cards
    CITY = auto()


@dataclass
class Card:
    type: CardType

    def get_one_hot(self) -> np.ndarray:
        """Convert card to one-hot encoding"""
        encoding = np.zeros(len(CardType))
        encoding[self.type.value - 1] = 1  # -1 because enum starts at 1
        return encoding

    @staticmethod
    def get_card_index(card_type: CardType) -> int:
        """Get the index in the one-hot encoding for a card type"""
        return card_type.value - 1


class GameState:
    def __init__(self):
        self.paperboy = None  # 1 or 2
        self.spy = None  # 1 or 2
        self.first_player = None  # 1 or 2
        self.current_player = None  # 1 or 2

        # Initialize card counts
        self.card_counts = {
            CardType.BLUE_5: 5,
            CardType.PINK_6: 6,
            CardType.ORANGE_7: 7,
            CardType.YELLOW_8: 8,
            CardType.MOD_NEG_1: 3,
            CardType.MOD_NEG_2: 4,
            CardType.MOD_NEG_3: 2,
            CardType.MOD_POS_2: 4,
            CardType.MOD_POS_3: 2,
            CardType.MOD_POS_4: 1,
            CardType.CITY: 3,
        }

        # Initialize game components
        self.deck = self._initialize_deck()
        self.player1_hand: List[Card] = []
        self.player2_hand: List[Card] = []
        self.player2_cards_played_this_round = 0
        self.middle_cards: List[Card] = []
        self.player1_collected: List[Card] = []
        self.player2_collected: List[Card] = []
        self.removed_cards: List[Card] = []

        # Game state flags
        self.current_player = 1  # 1 or 2
        self.can_player1_collect = True
        self.can_player2_collect = True
        self.round_number = 1  # 1 to 4

        # Initialize game
        self._setup_game()

    def _initialize_deck(self) -> List[Card]:
        """Create and shuffle the initial deck"""
        deck = []
        for card_type, count in self.card_counts.items():
            deck.extend([Card(card_type) for _ in range(count)])
        np.random.shuffle(deck)
        return deck

    def _setup_game(self):
        """Perform initial game setup"""
        self.paperboy = np.random.choice([1, 2])
        self.spy = 3 - self.paperboy

        # Randomly choose whether paperboy or spy goes first
        self.first_player = np.random.choice([1, 2])
        self.current_player = self.first_player

        # Remove 3 random cards
        self.removed_cards = self.deck[:3]
        self.deck = self.deck[3:]

        # Deal initial hands
        self.player1_hand = self.deck[:5]
        self.deck = self.deck[5:]
        self.player2_hand = self.deck[:5]
        self.deck = self.deck[5:]

        # Place initial middle cards
        self.middle_cards = self.deck[:2]
        self.deck = self.deck[2:]

    def get_state_tensor(self) -> torch.Tensor:
        """
        Convert current game state to tensor representation with imperfect information,
        always from Player 1's perspective. Includes both basic location features
        and derived "strategic" features.
        """

        features = []

        # -------------------------------------------------------------------------
        # 1) Card location features
        # -------------------------------------------------------------------------
        # For each zone, we track the count of each CardType:
        card_location_features = []
        for cards in [
            self.player1_hand,  # Always your (P1) hand
            self.middle_cards,  # Middle
            self.player1_collected,
            self.player2_collected,
        ]:
            encoding = np.zeros(len(CardType))
            for card in cards:
                encoding[Card.get_card_index(card.type)] += 1
            card_location_features.extend(encoding)
        features.extend(card_location_features)
        # => 44 features total (4 zones × 11 card types)

        # -------------------------------------------------------------------------
        # 2) Basic game state flags
        # -------------------------------------------------------------------------
        game_state_features = []

        # Who is current player? (from P1 perspective: 1 if it's P1's turn, else 0)
        game_state_features.append(float(self.current_player == 1))

        # Whether each player can still collect
        game_state_features.append(float(self.can_player1_collect))
        game_state_features.append(float(self.can_player2_collect))

        # Round encoding (up to 4 rounds)
        round_encoding = np.zeros(4)
        round_index = min(self.round_number - 1, 3)  # clamp
        round_encoding[round_index] = 1
        game_state_features.extend(round_encoding)

        # If you wanted role encoding (paperboy vs spy):
        # role_encoding = np.zeros(2)
        # if self.paperboy == 1:
        #     role_encoding[0] = 1  # P1 is paperboy
        # else:
        #     role_encoding[1] = 1  # P1 is spy
        # game_state_features.extend(role_encoding)

        features.extend(game_state_features)

        # -------------------------------------------------------------------------
        # 3) Derived features
        # -------------------------------------------------------------------------
        derived_features = []

        # 3.1) Expanded set-completion features
        derived_features.extend(self._get_expanded_set_completion_features())

        # 3.2) Color majority features
        derived_features.extend(self._get_color_majority_features())
        derived_features.extend(self._get_color_majority_diff_features())

        # 3.3) [Optional] Special card features
        # derived_features.extend(self._get_special_card_features())

        # 3.4) [Optional] Probability of each card type
        # derived_features.extend(self._get_probability_features())

        # 3.5) [Optional] Position embeddings for last N middle cards
        # derived_features.extend(self._get_position_embeddings())

        # 3.6) [Optional] Historical moves
        # derived_features.extend(self._get_historical_moves())

        # 3.7) City distance to victory
        derived_features.extend(self._get_city_features())

        # 3.8) Score difference (perspective-based)
        derived_features.extend(self._get_score_difference_features())

        # 3.9) Hand composition (if it's your turn)
        derived_features.extend(self._get_hand_composition_features())

        # 3.10) Opponent collect threat
        derived_features.extend(self._get_opponent_collect_threat_features())

        features.extend(derived_features)

        # -------------------------------------------------------------------------
        # 4) Strategic features
        # -------------------------------------------------------------------------
        # Consolidate your collect threat, hypothetical collect scores, etc.
        strategic_features = self._get_strategic_features()
        features.extend(strategic_features)

        # -------------------------------------------------------------------------
        # Return final tensor
        # -------------------------------------------------------------------------
        return torch.tensor(features, dtype=torch.float76)

    # =========================================================================
    # ================    HELPER FUNCTIONS FOR DERIVED FEATURES   =============
    # =========================================================================

    def _get_expanded_set_completion_features(self) -> List[float]:
        """
        Returns multiple features that gauge progress toward set completion,
        not just for (5-6-7-8) but also partial sets, etc.
        """
        features = []

        if self.current_player == 1:
            current_hand = self.player1_hand
            current_collected = self.player1_collected
        else:
            current_hand = self.player2_hand
            current_collected = self.player2_collected

        # Main set (5-6-7-8) completion ratio
        main_set = [
            CardType.BLUE_5,
            CardType.PINK_6,
            CardType.ORANGE_7,
            CardType.YELLOW_8,
        ]
        total_main_set_cards = sum(
            1 for c in (current_hand + current_collected) if c.type in main_set
        )
        completion = total_main_set_cards / len(main_set)  # 0..1
        features.append(completion)

        # Number of fully completed sets (5-6-7-8)
        completed_sets = self._count_complete_sets(current_collected)
        features.append(float(completed_sets))

        # Count each rank in hand + collected
        for rank_type in main_set:
            count_rank = sum(
                1 for c in (current_hand + current_collected) if c.type == rank_type
            )
            features.append(float(count_rank))

        return features

    def _count_complete_sets(self, cards: List[Card]) -> int:
        """
        Count how many complete sets (5-6-7-8) a player has in 'cards'.
        Each set must have at least one BLUE_5, one PINK_6, one ORANGE_7, and one YELLOW_8.
        """
        counts = {
            CardType.BLUE_5: 0,
            CardType.PINK_6: 0,
            CardType.ORANGE_7: 0,
            CardType.YELLOW_8: 0,
        }
        for card in cards:
            if card.type in counts:
                counts[card.type] += 1
        return min(counts.values())

    def _get_color_majority_features(self) -> List[float]:
        """
        Calculates majority status for each color, from the perspective of whoever's turn it is.
        Each color majority is scaled to [-1..1] relative to total possible cards in that color.
        """
        colors = [
            CardType.BLUE_5,
            CardType.PINK_6,
            CardType.ORANGE_7,
            CardType.YELLOW_8,
        ]
        features = []

        for color in colors:
            p1_count = sum(1 for c in self.player1_collected if c.type == color)
            p2_count = sum(1 for c in self.player2_collected if c.type == color)
            total_in_deck = self.card_counts[color]

            if self.current_player == 1:
                majority_metric = (p1_count - p2_count) / total_in_deck
            else:
                majority_metric = (p2_count - p1_count) / total_in_deck
            features.append(majority_metric)

        return features

    def _get_color_majority_diff_features(self) -> List[float]:
        """
        Absolute difference in number of each color (p1 minus p2).
        This can let the network see raw advantage for each color.
        """
        colors = [
            CardType.BLUE_5,
            CardType.PINK_6,
            CardType.ORANGE_7,
            CardType.YELLOW_8,
        ]
        features = []

        p1_counts = {c: 0 for c in colors}
        p2_counts = {c: 0 for c in colors}

        for card in self.player1_collected:
            if card.type in p1_counts:
                p1_counts[card.type] += 1
        for card in self.player2_collected:
            if card.type in p2_counts:
                p2_counts[card.type] += 1

        for color in colors:
            diff = p1_counts[color] - p2_counts[color]
            features.append(float(diff))  # can be negative or positive

        return features

    def _get_city_features(self) -> List[float]:
        """
        Calculate how close you are to collecting all city cards (3).
        Normalized to [0..1]. If self.current_player is 1, track P1's city progress; else track P2's.
        """
        features = []

        if self.current_player == 1:
            current_cities = sum(
                1 for c in self.player1_collected if c.type == CardType.CITY
            )
        else:
            current_cities = sum(
                1 for c in self.player2_collected if c.type == CardType.CITY
            )
        features.append((3 - current_cities) / 3)  # 0..1 scale

        return features

    def _get_score_difference_features(self) -> List[float]:
        """
        Returns a single feature for (your_score - opponent_score),
        from the perspective of the current player.
        """
        p1_score = self._calculate_score(self.player1_collected)
        p2_score = self._calculate_score(self.player2_collected)

        if self.current_player == 1:
            diff = p1_score - p2_score
        else:
            diff = p2_score - p1_score

        return [float(diff)]

    def _calculate_score(self, collected_cards: List[Card]) -> int:
        """
        Calculate final score for a set of collected cards, including:
         - Color majorities (5,6,7,8 points each if you have more)
         - Complete set bonus (5 points each)
         - Modifier cards (+2,+3,+4 and -1,-2,-3)
        """
        score = 0

        # Count color majorities for current set
        color_counts = {
            CardType.BLUE_5: 0,
            CardType.PINK_6: 0,
            CardType.ORANGE_7: 0,
            CardType.YELLOW_8: 0,
        }
        for card in collected_cards:
            if card.type in color_counts:
                color_counts[card.type] += 1

        # Identify the "other" player's cards for majority comparison
        if collected_cards is self.player1_collected:
            other_collected = self.player2_collected
        else:
            other_collected = self.player1_collected

        other_color_counts = {
            CardType.BLUE_5: 0,
            CardType.PINK_6: 0,
            CardType.ORANGE_7: 0,
            CardType.YELLOW_8: 0,
        }
        for card in other_collected:
            if card.type in other_color_counts:
                other_color_counts[card.type] += 1

        # Award points for color majorities
        if color_counts[CardType.BLUE_5] > other_color_counts[CardType.BLUE_5]:
            score += 5
        if color_counts[CardType.PINK_6] > other_color_counts[CardType.PINK_6]:
            score += 6
        if color_counts[CardType.ORANGE_7] > other_color_counts[CardType.ORANGE_7]:
            score += 7
        if color_counts[CardType.YELLOW_8] > other_color_counts[CardType.YELLOW_8]:
            score += 8

        # Score complete sets (5-6-7-8)
        num_complete_sets = min(
            color_counts[CardType.BLUE_5],
            color_counts[CardType.PINK_6],
            color_counts[CardType.ORANGE_7],
            color_counts[CardType.YELLOW_8],
        )
        score += num_complete_sets * 5

        # Add modifier values
        for card in collected_cards:
            if card.type == CardType.MOD_POS_2:
                score += 2
            elif card.type == CardType.MOD_POS_3:
                score += 3
            elif card.type == CardType.MOD_POS_4:
                score += 4
            elif card.type == CardType.MOD_NEG_1:
                score -= 1
            elif card.type == CardType.MOD_NEG_2:
                score -= 2
            elif card.type == CardType.MOD_NEG_3:
                score -= 3

        return score

    def _get_hand_composition_features(self) -> List[float]:
        """
        Returns counts of city cards, positive mods, and negative mods in *current player's* hand.
        If it's the opponent's turn, you could choose to skip or encode zeros (imperfect info).
        """
        features = []
        if self.current_player == 1:
            current_hand = self.player1_hand
        else:
            current_hand = self.player2_hand

        # Count city cards
        city_in_hand = sum(1 for c in current_hand if c.type == CardType.CITY)
        features.append(float(city_in_hand))

        # Count positive modifiers
        pos_mods = [CardType.MOD_POS_2, CardType.MOD_POS_3, CardType.MOD_POS_4]
        pmods_in_hand = sum(1 for c in current_hand if c.type in pos_mods)
        features.append(float(pmods_in_hand))

        # Count negative modifiers
        neg_mods = [CardType.MOD_NEG_1, CardType.MOD_NEG_2, CardType.MOD_NEG_3]
        nmods_in_hand = sum(1 for c in current_hand if c.type in neg_mods)
        features.append(float(nmods_in_hand))

        return features

    def _get_opponent_collect_threat_features(self) -> List[float]:
        """
        1. Whether the opponent can still collect this round (0 or 1).
        2. Whether the opponent is forced to collect (they have no cards in hand but can collect).
        """
        features = []
        opp = 2 if self.current_player == 1 else 1

        # Opponent can collect?
        can_opp_collect = (
            self.can_player2_collect if opp == 2 else self.can_player1_collect
        )
        features.append(float(can_opp_collect))

        # Opponent forced to collect?
        # e.g. if they have zero cards in hand but can still collect, and the middle is non-empty.
        if opp == 2:
            opp_hand_size = len(self.player2_hand)
        else:
            opp_hand_size = len(self.player1_hand)

        forced = (
            (opp_hand_size == 0) and can_opp_collect and (len(self.middle_cards) > 0)
        )
        features.append(float(forced))

        return features

    # =========================================================================
    # ================     STRATEGIC / COLLECT THREAT FEATURES    =============
    # =========================================================================

    def _get_strategic_features(self) -> List[float]:
        """
        Wraps the "collect threat" and hypothetical collect scores into one place.
        Returns a list of floats that you can directly extend into the main feature vector.
        """
        feats = []

        # 1) collect threat features: difference if you collect now vs if opponent does
        threat_feats = self._get_collect_threat_features()
        feats.extend(threat_feats)

        # 2) optional: store your immediate collect score & opponent's (both as separate features)
        your_collect = self._estimate_collect_score(self.current_player)
        opp_collect = self._estimate_collect_score(3 - self.current_player)
        feats.append(your_collect)
        feats.append(opp_collect)

        # _simulate_collect(...) returns a list of Card, so not directly numeric features.
        # If you want to encode, say, how many negative cards that would be, you can do it here:
        # e.g. how many negative cards you *would* pick up?
        # But for now, we'll skip that or keep it simple.

        return feats

    def _get_collect_threat_features(self) -> List[float]:
        """
        Encodes the "value of the middle" for you vs. the opponent,
        plus how many negative cards are in the last 5.
        Returns a [collect_diff, neg_count] float list.
        """
        features = []

        # 1) Score if YOU collect right now
        your_collect_score = self._estimate_collect_score(self.current_player)

        # 2) Score if OPPONENT collects on their next turn
        opp = 3 - self.current_player
        opp_collect_score = self._estimate_collect_score(opp)

        # 3) Difference
        collect_diff = your_collect_score - opp_collect_score
        features.append(collect_diff)

        # 4) Negative cards in the last 5
        negatives = [CardType.MOD_NEG_1, CardType.MOD_NEG_2, CardType.MOD_NEG_3]
        last_5 = self.middle_cards[-5:]
        neg_count = sum(1 for c in last_5 if c.type in negatives)
        features.append(float(neg_count))

        return features

    def _estimate_collect_score(self, player_id: int) -> float:
        """
        Estimate how many points this player would gain by collecting
        the last 5 cards right now (compared to their current score).
        """
        last_5_cards = self.middle_cards[-5:]
        hypothetical_collected = self._simulate_collect(player_id, last_5_cards)

        # Score from that hypothetical scenario
        hypothetic_score = self._calculate_score(hypothetical_collected)

        # Compare to current actual score
        if player_id == 1:
            curr_score = self._calculate_score(self.player1_collected)
        else:
            curr_score = self._calculate_score(self.player2_collected)

        return float(hypothetic_score - curr_score)

    def _simulate_collect(self, player_id: int, cards_to_add: List[Card]) -> List[Card]:
        """
        Return a new 'collected' list that simulates the effect of collecting
        these 'cards_to_add', without modifying the real game state.
        """
        if player_id == 1:
            return self.player1_collected + cards_to_add
        else:
            return self.player2_collected + cards_to_add

    def display_game_state(self):
        print("\nMiddle cards:")
        for i, card in enumerate(self.middle_cards):
            print(f"{i}: {card.type.name}", end=" ")
        print("\n")

        print(f"Player {self.current_player}'s hand:")
        for i, card in enumerate(self.get_current_hand()):
            print(f"{i}: {card.type.name}", end=" ")
        print("\n")

        print("Collected cards:")
        print("Player 1:", [card.type.name for card in self.player1_collected])
        print("Player 2:", [card.type.name for card in self.player2_collected])
        print()

    def get_legal_actions(self) -> List[int]:
        """Get list of legal actions (0-4 for playing cards, 5 for collect, 6 for pass)"""
        actions = []
        current_hand = self.get_current_hand()

        # Can play any card from hand
        if current_hand:
            actions.extend(range(len(current_hand)))

        # Can collect anytime if haven't collected yet and there are cards
        can_collect = (
            (self.current_player == 1 and self.can_player1_collect)
            or (self.current_player == 2 and self.can_player2_collect)
        ) and len(self.middle_cards) > 0

        # print("can collect:", can_collect)

        if can_collect:
            actions.append(5)

        # Can pass only if no cards in hand AND either:
        # 1. Can't collect (already collected) OR
        # 2. No cards to collect
        has_cards_in_hand = (
            len(self.player1_hand) > 0
            if self.current_player == 1
            else self.player2_cards_played_this_round < 5
        )
        # print("len(self.player1_hand):", len(self.player1_hand))
        # print("current player:", self.current_player)
        # print(
        #     "self.player2_cards_played_this_round:",
        #     self.player2_cards_played_this_round,
        # )
        # print("has_cards_in_hand:", has_cards_in_hand)
        if not has_cards_in_hand and (
            (self.current_player == 1 and not self.can_player1_collect)
            or (self.current_player == 2 and not self.can_player2_collect)
            or len(self.middle_cards) == 0
        ):
            actions.append(6)

        # print("actions:", actions)

        # There should always be at least one legal action
        # assert len(actions) > 0, "No legal actions available!"

        return actions

    def is_terminal(self) -> bool:
        """Check if the game is over"""
        # print(f"\nChecking terminal state:")
        # print(f"Deck size: {len(self.deck)}")
        # print(f"P1 hand: {len(self.player1_hand)}")
        # print(f"Middle cards: {len(self.middle_cards)}")
        # print(f"P1 can collect: {self.can_player1_collect}")
        # print(f"P2 can collect: {self.can_player2_collect}")
        # Game ends if either player has all city cards
        p1_cities = sum(
            1 for card in self.player1_collected if card.type == CardType.CITY
        )
        p2_cities = sum(
            1 for card in self.player2_collected if card.type == CardType.CITY
        )
        if p1_cities == 3 or p2_cities == 3:
            return True

        # Game also ends if no one can make any more moves
        player1_can_move = len(self.player1_hand) > 0 or (
            self.can_player1_collect and len(self.middle_cards) > 0
        )
        player2_can_move = self.player2_cards_played_this_round < 5 or (
            self.can_player2_collect and len(self.middle_cards) > 0
        )

        if not player1_can_move and not player2_can_move:
            return True

        return False

    def _get_unseen_card_features(self) -> List[float]:
        """Calculate features for tracking unseen cards"""
        features = []

        # Count visible cards
        visible_cards = (
            self.get_current_hand()  # Only your hand
            + self.middle_cards
            + self.player1_collected
            + self.player2_collected
            + self.removed_cards
        )

        # For each card type, calculate how many are still unseen
        for card_type in CardType:
            total = self.card_counts[card_type]
            visible = sum(1 for card in visible_cards if card.type == card_type)
            remaining = total - visible
            features.append(remaining / total)  # Normalize to [0,1]

        return features

    def make_move(self, action: int):
        """Execute a move in the game"""
        current_hand = self.get_current_hand()

        if action == 6:  # Pass (no cards in hand)
            pass  # Do nothing
        elif action == 5:  # Collect
            cards_to_collect = min(5, len(self.middle_cards))
            if self.current_player == 1:
                self.player1_collected.extend(self.middle_cards[-cards_to_collect:])
                self.can_player1_collect = False
            else:
                self.player2_collected.extend(self.middle_cards[-cards_to_collect:])
                self.can_player2_collect = False
            self.middle_cards = self.middle_cards[:-cards_to_collect]
        else:  # Play card
            if current_hand:
                if self.current_player == 1:
                    self.middle_cards.append(current_hand[action])
                    self.player1_hand.pop(action)
                else:
                    self.middle_cards.append(self.player2_hand[action])
                    self.player2_hand.pop(action)
                    self.player2_cards_played_this_round += 1

        # Deal new cards at end of round
        if (
            not self.player1_hand
            and self.player2_cards_played_this_round >= 5
            and not self.can_player1_collect
            and not self.can_player2_collect
            and self.deck
        ):
            self.player1_hand = self.deck[:5]
            self.deck = self.deck[5:]
            self.player2_hand = self.deck[:5]  # Deal to player 2
            self.deck = self.deck[5:]
            self.player2_cards_played_this_round = 0
            self.can_player1_collect = True
            self.can_player2_collect = True
            self.round_number += 1
            self.current_player = (
                self.first_player
                if self.round_number % 2 == 1
                else (3 - self.first_player)
            )
            return

        # Switch players
        self.current_player = 3 - self.current_player

    def get_current_hand(self) -> List[Card]:
        """Get the current player's hand"""
        if self.current_player == 1:
            return self.player1_hand
        else:
            return self.player2_hand

    def get_result(self) -> float:
        """Get the game result (1 for player 1 win, -1 for player 2 win, 0 for draw)"""
        # Check city card victory
        p1_cities = sum(
            1 for card in self.player1_collected if card.type == CardType.CITY
        )
        p2_cities = sum(
            1 for card in self.player2_collected if card.type == CardType.CITY
        )
        if p1_cities == 3:
            return 1.0
        if p2_cities == 3:
            return -1.0

        # Calculate points
        p1_score = self._calculate_score(self.player1_collected)
        p2_score = self._calculate_score(self.player2_collected)

        if p1_score > p2_score:
            return 1.0
        elif p2_score > p1_score:
            return -1.0
        else:
            # see who has the most 8s
            p1_eights = sum(
                1 for card in self.player1_collected if card.type == CardType.YELLOW_8
            )
            p2_eights = sum(
                1 for card in self.player2_collected if card.type == CardType.YELLOW_8
            )
            if p1_eights > p2_eights:
                return 1.0
            elif p2_eights > p1_eights:
                return -1.0

            # see who has the most 7s
            p1_sevens = sum(
                1 for card in self.player1_collected if card.type == CardType.ORANGE_7
            )
            p2_sevens = sum(
                1 for card in self.player2_collected if card.type == CardType.ORANGE_7
            )
            if p1_sevens > p2_sevens:
                return 1.0
            elif p2_sevens > p1_sevens:
                return -1.0

            # see who has the most 6s
            p1_sixes = sum(
                1 for card in self.player1_collected if card.type == CardType.PINK_6
            )
            p2_sixes = sum(
                1 for card in self.player2_collected if card.type == CardType.PINK_6
            )
            if p1_sixes > p2_sixes:
                return 1.0
            elif p2_sixes > p1_sixes:
                return -1.0

            # see who has the most 5s
            p1_fives = sum(
                1 for card in self.player1_collected if card.type == CardType.BLUE_5
            )
            p2_fives = sum(
                1 for card in self.player2_collected if card.type == CardType.BLUE_5
            )
            if p1_fives > p2_fives:
                return 1.0
            elif p2_fives > p1_fives:
                return -1.0

            return 0.0

    def clone(self) -> "GameState":
        """Create a deep copy of the game state"""
        new_state = GameState()
        new_state.deck = self.deck.copy()
        new_state.player1_hand = self.player1_hand.copy()
        new_state.player2_hand = self.player2_hand.copy()
        new_state.middle_cards = self.middle_cards.copy()
        new_state.player1_collected = self.player1_collected.copy()
        new_state.player2_collected = self.player2_collected.copy()
        new_state.removed_cards = self.removed_cards.copy()
        new_state.current_player = self.current_player
        new_state.can_player1_collect = self.can_player1_collect
        new_state.can_player2_collect = self.can_player2_collect
        new_state.round_number = self.round_number
        new_state.player2_cards_played_this_round = self.player2_cards_played_this_round
        return new_state

    def _calculate_score(self, collected_cards: List[Card]) -> int:
        """Calculate score for a player's collected cards"""
        score = 0

        # Count color majorities
        color_counts = {
            CardType.BLUE_5: 0,
            CardType.PINK_6: 0,
            CardType.ORANGE_7: 0,
            CardType.YELLOW_8: 0,
        }
        for card in collected_cards:
            if card.type in color_counts:
                color_counts[card.type] += 1

        # Score for color majorities
        other_collected = (
            self.player2_collected
            if collected_cards is self.player1_collected
            else self.player1_collected
        )
        other_counts = {
            CardType.BLUE_5: 0,
            CardType.PINK_6: 0,
            CardType.ORANGE_7: 0,
            CardType.YELLOW_8: 0,
        }
        for card in other_collected:
            if card.type in other_counts:
                other_counts[card.type] += 1

        # Add points for majorities
        if color_counts[CardType.BLUE_5] > other_counts[CardType.BLUE_5]:
            score += 5
        if color_counts[CardType.PINK_6] > other_counts[CardType.PINK_6]:
            score += 6
        if color_counts[CardType.ORANGE_7] > other_counts[CardType.ORANGE_7]:
            score += 7
        if color_counts[CardType.YELLOW_8] > other_counts[CardType.YELLOW_8]:
            score += 8

        # Score for complete sets (5-6-7-8)
        num_complete_sets = min(
            color_counts[CardType.BLUE_5],
            color_counts[CardType.PINK_6],
            color_counts[CardType.ORANGE_7],
            color_counts[CardType.YELLOW_8],
        )
        score += num_complete_sets * 5

        # Add modifier card values
        for card in collected_cards:
            if card.type == CardType.MOD_POS_2:
                score += 2
            elif card.type == CardType.MOD_POS_3:
                score += 3
            elif card.type == CardType.MOD_POS_4:
                score += 4
            elif card.type == CardType.MOD_NEG_1:
                score -= 1
            elif card.type == CardType.MOD_NEG_2:
                score -= 2
            elif card.type == CardType.MOD_NEG_3:
                score -= 3

        return score

    def pretty_print_state(self):
        """Pretty print the current game state"""
        print("\n" + "=" * 50)
        print(f"Round {self.round_number} - Player {self.current_player}'s turn")
        print("=" * 50)

        # Print role information
        print(f"\nRoles:")
        print(f"Player 1: {'Paperboy' if self.paperboy == 1 else 'Spy'}")
        print(f"Player 2: {'Paperboy' if self.paperboy == 2 else 'Spy'}")

        # Print middle cards with oldest → newest indication
        print("\nMiddle Cards (oldest → newest):")
        print("-" * 30)
        if not self.middle_cards:
            print("(empty)")
        else:
            for i, card in enumerate(self.middle_cards):
                if i == len(self.middle_cards) - 1:
                    print(f"{card.type.name} ← Most recent")
                else:
                    print(f"{card.type.name} → ", end="")

        # Print hands
        print("\nPlayer 1's Hand:")
        print("-" * 30)
        if not self.player1_hand:
            print("(empty)")
        else:
            for i, card in enumerate(self.player1_hand):
                print(f"{i}: {card.type.name}", end="  ")
        print("\nCan collect: " + ("Yes" if self.can_player1_collect else "No"))

        print("\nPlayer 2's Hand:")
        print("-" * 30)
        if not self.player2_hand:
            print("(empty)")
        else:
            for i, card in enumerate(self.player2_hand):
                print(f"{i}: {card.type.name}", end="  ")
        print("\nCan collect: " + ("Yes" if self.can_player2_collect else "No"))

        # Print collected cards
        print("\nCollected Cards:")
        print("-" * 30)
        print("Player 1:")
        if not self.player1_collected:
            print("(none)")
        else:
            # Group cards by type for cleaner display
            grouped = {}
            for card in self.player1_collected:
                grouped[card.type.name] = grouped.get(card.type.name, 0) + 1
            for card_type, count in sorted(grouped.items()):
                print(f"{card_type}: {count}", end="  ")

        print("\n\nPlayer 2:")
        if not self.player2_collected:
            print("(none)")
        else:
            grouped = {}
            for card in self.player2_collected:
                grouped[card.type.name] = grouped.get(card.type.name, 0) + 1
            for card_type, count in sorted(grouped.items()):
                print(f"{card_type}: {count}", end="  ")

        # Print scores
        print("\n\nCurrent Scores:")
        print("-" * 30)
        p1_score = self._calculate_score(self.player1_collected)
        p2_score = self._calculate_score(self.player2_collected)
        print(f"Player 1: {p1_score}")
        print(f"Player 2: {p2_score}")

        # Print city card count
        p1_cities = sum(
            1 for card in self.player1_collected if card.type == CardType.CITY
        )
        p2_cities = sum(
            1 for card in self.player2_collected if card.type == CardType.CITY
        )
        print(f"\nCity Cards - Player 1: {p1_cities}, Player 2: {p2_cities}")

        print("\n" + "=" * 50 + "\n")
